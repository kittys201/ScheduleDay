@page "/tasks/create"
@page "/tasks/edit/{Id:int}"
@inject ScheduleDay.Client.Services.TaskService TaskService
@inject NavigationManager Navigation
@attribute [Authorize]
@using ScheduleDay.Shared.Models

<HeadContent>
    <PageTitle>@(Id == null ? "Add Task" : "Edit Task")</PageTitle>
    <meta name="description" content="@(Id == null ? "Add new tasks to your to-do list." : "Edit tasks in your to-do list.")" />
    <meta name="keywords" content="@(Id == null ? "add task, new task, to-do, productivity, create task" : "edit task, update task, to-do, productivity, task management")" />
</HeadContent>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>@(Id == null ? "New Task" : "Edit Task")</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@task" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="task.Name" class="form-control" />
                            <ValidationMessage For="@(() => task.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea @bind-Value="task.Description" class="form-control" rows="3" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Date</label>
                            <InputDate @bind-Value="task.Date" class="form-control" />
                            <ValidationMessage For="@(() => task.Date)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Status</label>
                            <InputSelect @bind-Value="task.Status" class="form-control">
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </InputSelect>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                @(Id == null ? "Create" : "Save")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private TaskItem task = new() 
    { 
        Date = DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc)
    };

    protected override async Task OnInitializedAsync()
    {
        // If editing, load selected task data
        if (Id.HasValue)
        {
            var loadedTask = await TaskService.GetTaskById(Id.Value);
            if (loadedTask != null)
            {
                loadedTask.Date = DateTime.SpecifyKind(loadedTask.Date, DateTimeKind.Utc);
                task = loadedTask;
            }
        }
    }

    private async Task HandleSubmit()
    {
        // Either create new task or update existing task, then redirect user to /tasks route
        bool success;
        if (Id.HasValue)
        {
            success = await TaskService.UpdateTask(task);
        }
        else
        {
            success = await TaskService.CreateTask(task);
        }

        if (success)
        {
            Navigation.NavigateTo("/tasks");
        }
    }

    private void Cancel()
    {
        // Redirect to /tasks route
        Navigation.NavigateTo("/tasks");
    }
}