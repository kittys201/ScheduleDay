@page "/register"
@using System.ComponentModel.DataAnnotations
@inject Services.AuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<Register> _logger

<HeadContent>
    <PageTitle>Sign up</PageTitle>
    <meta name="description" content="Signup page for new users." />
    <meta name="keywords" content="signup, register, new user, create account" />
</HeadContent>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Registration</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="registerModel.Name" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Name)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="registerModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="registerModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => registerModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger">
                                @error
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Registering...</span>
                                }
                                else
                                {
                                    <span>Register</span>
                                }
                            </button>
                            <a href="/login" class="btn btn-link">Already have an account? Log in</a>
                        </div>
                    </EditForm>
                </div>

                <div class="card-body">
                    <button class="btn btn-primary" @onclick="GoogleOAuth">
                        <img src="https://img.icons8.com/color/16/000000/google-logo.png" alt="Google logo" />
                        Sign in with Google
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    private RegisterModel registerModel = new();
    private string? error;
    private string? successMessage;
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        // Handle registration and catch exceptions
        try
        {
            isLoading = true;
            error = null;
            successMessage = null;

            _logger.LogInformation("Starting registration for the following user: {Email}", registerModel.Email);

            var result = await AuthService.Register(
            registerModel.Name,
            registerModel.Email,
            registerModel.Password);

            bool success = result.Success;
            string message = result.Message;

            if (success)
            {
                _logger.LogInformation("Successful registration");
                successMessage = "Successful registration. Redirecting to login...";
                await Task.Delay(1500);
                Navigation.NavigateTo("/login");
            }
            else
            {
                _logger.LogWarning("Failed registration: {Message}", message);
                error = message;
            }
        }
        catch
        {
            _logger.LogError("Error during registration");
            error = "There was an unexpected error. Please, try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        // Registration data validation
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must contain at least 6 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{6,}$",
        ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, and one number")]
        public string Password { get; set; } = string.Empty;
    }


    private void GoogleOAuth()
    {

        Navigation.NavigateTo("https://localhost:7073/api/auth/externallogin", true);
        // it shoud be the port of clinet?

    }
}



@* No puedes acceder porque esta app envió una solicitud no válida. Puedes volver a intentarlo más tarde o comunicarte con
el desarrollador acerca de este problema. Más información sobre este error
Si eres un desarrollador de esta app, consulta los detalles del error.
Error 400: redirect_uri_mismatch


Error 400: redirect_uri_mismatch

No puedes acceder a esta app porque no cumple con la política OAuth 2.0 de Google.

Si eres el desarrollador de la app, registra el URI de redireccionamiento en Google Cloud Console.
Detalles de la solicitud: redirect_uri=https://localhost:7073/signin-google flowName=GeneralOAuthFlow
Documentos de desarrolladores relacionados *@