@page "/login"
@inject Services.AuthService AuthService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.ActivityMonitor ActivityMonitor
@inject ILogger<Login> _logger
@using Microsoft.AspNetCore.WebUtilities
@using ScheduleDay.Shared.Models

<HeadContent>
    <PageTitle>Login</PageTitle>
    <meta name="description" content="Login page." />
    <meta name="keywords" content="login, authentication, user" />
</HeadContent>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-5">
                <div class="card-header">
                    <h3 class="text-center">Log in</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input"
                                id="rememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Stay logged in
                            </label>
                        </div>

                        @if (!string.IsNullOrEmpty(error))
                        {
                            <div class="alert alert-danger">
                                @error
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(sessionExpiredMessage))
                        {
                            <div class="alert alert-warning">
                                @sessionExpiredMessage
                            </div>
                        }

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-2">Loading...</span>
                                }
                                else
                                {
                                    <span>Log in</span>
                                }
                            </button>
                            <a href="/register" class="btn btn-link">Don't have an account? Register</a>
                        </div>
                    </EditForm>
                </div>
                <div class="d-grid gap-2 text-center">
                    <p class="m-0">Or</p>
                </div>

                <div class="d-grid gap-2">
                    <button type="submit" @onclick="GoogleOAuth" class="btn btn-danger" disabled="@isLoading">
                        <img src="https://img.icons8.com/color/16/000000/google-logo.png" alt="Google logo" />
                        Sign in with Google
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? error;
    private string? returnUrl;
    private string? sessionExpiredMessage;
    private bool isLoading = false;
    private AuthenticationState? _authenticationState = null;

    protected override async Task OnInitializedAsync()
    {
        /// Get authentication state
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        // Check if user is authenticated
        if (_authenticationState.User.Identity?.IsAuthenticated == true)
        {
            // Redirect to tasks
            Navigation.NavigateTo("/tasks");
        }

        // Check whether there is an authenticated user or the session is expired
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("returnUrl", out var param))
        {
            returnUrl = param.First();
        }

        if (queryParams.TryGetValue("expired", out var expired) && expired.First() == "true")
        {
            sessionExpiredMessage = "Your session has expired. Please log in again..";
        }
    }

    private async Task HandleLogin()
    {
        // Handle login and catch exceptions
        try
        {
            isLoading = true;
            error = null;
            sessionExpiredMessage = null;

            _logger.LogInformation("Trying to log in the following user: {Email}", loginModel.Email);

            var (success, message) = await AuthService.Login(
            loginModel.Email,
            loginModel.Password,
            loginModel.RememberMe);

            if (success)
            {
                _logger.LogInformation("Successful login, updating state...");
                await Task.Delay(500); //Short pause to make sure state is updated

                ActivityMonitor.UpdateActivity();
                if (string.IsNullOrEmpty(returnUrl))
                {
                    _logger.LogInformation("Redirecting to /tasks");
                    Navigation.NavigateTo("/tasks", true); // Force complete reload
                }
                else
                {
                    _logger.LogInformation("Redirecting to {ReturnUrl}", returnUrl);
                    Navigation.NavigateTo(returnUrl, true);
                }
            }
            else
            {
                _logger.LogWarning("Failed login: {Message}", message);
                error = message;
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error during login");
            error = "There was an unexpected error. Please, try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        // Login data validation
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }



    private void GoogleOAuth()
    {

        Navigation.NavigateTo("https://scheduledayapp-api-avc2a0acabeadth4.canadacentral-01.azurewebsites.net/api/auth/externallogin",
        true);
        @* Navigation.NavigateTo("api/auth/externallogin", true); *@
        //


    }
}