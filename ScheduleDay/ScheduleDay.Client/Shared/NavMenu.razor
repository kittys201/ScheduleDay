@using Microsoft.AspNetCore.Components.Authorization

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="">Schedule Day</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <a class="nav-link" href="tasks">
                                Tasks
                            </a>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link btn btn-link" @onclick="HandleLogout">
                                Log out
                            </button>
                        </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <a class="nav-link" href="login">
                                Log in
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="register">
                                Register
                            </a>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse navbar-collapse" : "navbar-collapse";
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ScheduleDay.Client.Services.AuthService AuthService { get; set; } = default!;

    private async Task HandleLogout()
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/", true);
    }
}