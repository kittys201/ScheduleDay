@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ScheduleDay.Client.Services.UserService UserService

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="">Schedule Day</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <a class="nav-link" href="tasks">
                                Tasks
                            </a>
                        </li>

                        <li id="btn-hover" class="nav-item d-flex align-items-center">

                            <button class="nav-link btn btn-link" @onclick="HandleUserSettings">
                                @UserNameToDisplay
                            </button>
                            <div id="user-avatar" style="background-color:@UserColor;">
                                @UserInitial
                            </div>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link btn btn-link ps-0 ms-0" @onclick="HandleLogout">
                                Log out
                            </button>
                        </li>

                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <a class="nav-link" href="login">
                                Log in
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="register">
                                Register
                            </a>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {


    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse navbar-collapse" : "navbar-collapse";


    private string UserInitial { get; set; } = "";
    private string UserNameToDisplay { get; set; } = "";

    private string UserColor { get; set; } = "";

    private string GetRandomColor()
    {
        var randomColor = new Random();
        return $"#{randomColor.Next(0x1000000):X6}";
    }


    protected override async Task OnInitializedAsync()
    {
        UserColor = GetRandomColor();

        // Get the user information calling the UpdateUserInformation method
        await UpdateUserInformation();
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private ScheduleDay.Client.Services.AuthService AuthService { get; set; } = default!;

    private async Task HandleLogout()
    {
        await AuthService.Logout();
        await UpdateUserInformation();
        NavigationManager.NavigateTo("/", true);
    }

    private async Task HandleUserSettings()
    {

        var authState = await AuthService.GetAuthState();

        if (authState?.IsAuthenticated == true && !string.IsNullOrEmpty(authState.UserId))
        {
            await UpdateUserInformation();
            NavigationManager.NavigateTo($"/user/settings/{authState.UserId}");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }




    private async Task UpdateUserInformation()
    {
        var authState = await AuthService.CheckAuthState();
        if (authState)
        {
            var authStateGet = await AuthService.GetAuthState();

            if (authStateGet != null && !string.IsNullOrEmpty(authStateGet.Name))
            {
                var userName = authStateGet.Name;
                UserInitial = userName.Substring(0, 1).ToUpper();

                var firstName = userName.Split(' ').FirstOrDefault();
                if (firstName is not null && firstName.Length > 15)
                {
                    UserNameToDisplay = firstName.Substring(0, 12) + "...";
                }
                else
                {
                    UserNameToDisplay = firstName ?? "";
                }

                UserNameToDisplay = char.ToUpper(UserNameToDisplay[0]) + UserNameToDisplay.Substring(1).ToLower();
            }
            else
            {
                UserInitial = "U";
            }
        }

        StateHasChanged(); // force update the UI
    }


}